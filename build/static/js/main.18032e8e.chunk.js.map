{"version":3,"sources":["Search/Modal.jsx","Search/Search.jsx","ToDoList/ToDoItem.jsx","ToDoList/ToDoList.jsx","App.js","serviceWorker.js","index.js"],"names":["Modal","props","state","open","value","handleChange","bind","handleOpen","handleClose","addPost","e","this","setState","target","preventDefault","add","alert","Fragment","onClick","className","onSubmit","type","onChange","React","Component","Search","useState","useContext","Context","search","searchValue","ToDoItem","remove","select","classes","item","completed","push","id","join","do","ToDoList","todos","map","i","indexOf","key","createContext","App","setTodos","setSearchValue","todo","filter","addToDo","concat","length","Provider","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.18032e8e.chunk.js","sourcesContent":["import React from \"react\";\r\nimport {Context} from \"../App\";\r\n\r\n\r\n\r\n\r\n export class Modal extends React.Component{\r\n\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            open: false,\r\n            value: ''\r\n        }\r\n\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleOpen = this.handleOpen.bind(this);\r\n        this.handleClose = this.handleClose.bind(this);\r\n        this.addPost = this.addPost.bind(this)\r\n    }\r\n\r\n    handleChange(e){\r\n        this.setState({value: e.target.value})\r\n    }\r\n\r\n    handleOpen(){\r\n        this.setState({open: true})\r\n    }\r\n\r\n    handleClose(){\r\n        this.setState({open: false})\r\n    }\r\n\r\n    addPost(e){\r\n        e.preventDefault()\r\n         this.props.add(this.state.value)\r\n         this.setState({value: ''})\r\n         alert('Задача добавленна')\r\n    }\r\n\r\n    render(){\r\n\r\n        return(\r\n            <React.Fragment>\r\n                <button onClick={this.handleOpen}>Добавить</button>\r\n                {this.state.open && (\r\n                    <div className={'modal_wrap'}>\r\n                        <div className=\"modal\">\r\n                            <span onClick={this.handleClose}>&#10006;</span>\r\n                            <h2>Какой таск добавить?</h2>\r\n                            <form className=\"add\" onSubmit={this.addPost}>\r\n                                <input\r\n                                    type=\"text\"\r\n                                    value={this.state.value}\r\n                                    onChange={this.handleChange}\r\n\r\n                                />\r\n                                <button>Добавить задачу</button>\r\n                            </form>\r\n                        </div>\r\n                    </div>\r\n                )\r\n\r\n                }\r\n            </React.Fragment>\r\n        )\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React,{useContext} from \"react\";\r\nimport {Context} from \"../App\";\r\nimport {Modal} from \"./Modal\";\r\n\r\n\r\n\r\nexport const Search = ({add}) => {\r\n    let [value, setValue]  = React.useState('')\r\n\r\n    let {search, searchValue} = useContext(Context)\r\n\r\n\r\n    return(\r\n        <React.Fragment>\r\n        <div className={'navBar'} >\r\n            <input\r\n                type=\"text\"\r\n                value = {searchValue}\r\n                onChange={search}\r\n            />\r\n            <Modal add={add}/>\r\n        </div>\r\n\r\n        </React.Fragment>\r\n    )\r\n}","import React, {useContext} from \"react\";\r\nimport {Context} from \"../App\";\r\n\r\n\r\nexport const ToDoItem = (props) => {\r\n    let {remove, select} = useContext(Context)\r\n\r\n\r\n    let classes = []\r\n\r\n\r\n    if(props.item.completed){\r\n        classes.push('complete')\r\n    }\r\n\r\n\r\n\r\n    return(\r\n        <div className={'item'}>\r\n            <input\r\n                type=\"checkbox\"\r\n                onChange={select.bind(null, props.item.id)}\r\n            />\r\n\r\n            <span className={classes.join(' ')}>{props.item.id}.{props.item.do}</span>\r\n            <button onClick={remove.bind(null, props.item.id)}>\r\n                &times;\r\n            </button>\r\n        </div>\r\n    )\r\n}","import React, {useContext} from \"react\";\r\nimport {ToDoItem} from \"./ToDoItem\";\r\nimport {Context} from \"../App\";\r\n\r\n\r\n\r\nexport const ToDoList = ({todos, select, remove}) =>{\r\n    let {searchValue} = React.useContext(Context)\r\n\r\n    return(\r\n        <div className={'list'}>\r\n            {todos.map((item,i)=> {\r\n               if(item.do.indexOf(searchValue) === -1){\r\n                   return null\r\n               }\r\n\r\n                return(\r\n                    <ToDoItem\r\n                        key={i}\r\n                        item={item}\r\n                    />\r\n                    )\r\n            }) }\r\n        </div>\r\n\r\n    )\r\n}\r\n    ","import React from 'react';\nimport './App.css';\nimport {Search} from \"./Search/Search\";\nimport {ToDoList} from \"./ToDoList/ToDoList\";\n\n\n\nexport const Context = React.createContext()\n\nfunction App() {\n\n    let [todos, setTodos] = React.useState([\n        {id: 1, completed: false, do:'Оплатить квартплату'},\n        {id: 2, completed: false, do:'Позаниматься реактом'},\n        {id: 3, completed: false, do:'сходить на стрижку'},\n        {id: 4, completed: false, do:'сходить в спортзал'},\n    ])\n\n    let [searchValue, setSearchValue]= React.useState('')\n\n    const search = (e)=>{\n        setSearchValue(searchValue = e.target.value)\n    }\n\n    const select = (id)=>{\n        setTodos(todos = todos.map( (todo) => {\n            if(todo.id === id){\n                todo.completed = !todo.completed\n            }\n          return todo\n\n        }))\n    }\n\n    const remove = (id) => {\n        setTodos(todos = todos.filter((todo) => {\n            if(id !== todo.id){\n                return todo\n            }\n        }))\n    }\n\n    const addToDo = (todo) => {\n        setTodos(todos = todos.concat(\n        {id: todos.length+1, completed: false, do: todo},\n        ))\n    }\n\n\n  return (\n      <Context.Provider value={{\n          remove,\n          select,\n          searchValue,\n          search,\n          addToDo\n      }}>\n          <div className=\"App\">\n              <h1>My to do list</h1>\n              <Search\n                  add={addToDo}/>\n              {\n                  todos.length ?\n                      (\n                          <ToDoList\n                              todos={todos}\n                              select={select}\n                              remove={remove}\n                          />\n                      ) : (\n                          <p>Нету задач!</p>\n                      )\n              }\n\n          </div>\n      </Context.Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}