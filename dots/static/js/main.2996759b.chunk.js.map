{"version":3,"sources":["components/game board/dot of the game field/Dot.jsx","components/game board/GameBoard.jsx","components/board of leaders/LeaderBoard.jsx","App.js","serviceWorker.js","index.js"],"names":["Dot","x","y","background","userClick","className","style","onClick","GameBoard","winner","dots","blueBg","newGameFlag","newGame","name","mode","handleChange","settings","value","onChange","hidden","disabled","selected","length","map","i","key","Object","keys","delay","type","placeholder","dots_row","dot","LeaderBoard","winnerObj","date","App","props","count","state","indexes","Array","from","_","k","flat","sort","shuffle","computer","user","gameSettings","dashboardData","bind","Math","random","this","slice","setState","Date","toLocaleTimeString","toLocaleDateString","a","async","fetch","method","headers","body","JSON","stringify","respones","json","result","console","log","message","getData","setTimeout","alert","e","target","field","requestMode","requestWinner","dashboard","easyMode","normalMode","hardMode","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2996759b.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\n/* game dot */\r\nexport const Dot = ({x, y, background, userClick}) => {\r\n\r\n\r\n    return(\r\n        <div\r\n            className={'dot'}\r\n            style={{background: background}}\r\n            onClick={()=>userClick(x,y)}\r\n\r\n        />\r\n\r\n    )\r\n}","import React from \"react\";\r\nimport {Dot} from \"./dot of the game field/Dot\";\r\n\r\n\r\nexport const GameBoard = ({winner, dots, blueBg, newGameFlag, newGame, userClick, name, mode, handleChange, settings}) => {\r\n\r\n\r\n    return (\r\n        <div className={'game_board'}>\r\n            <div className=\"game_menu\">\r\n\r\n                {/*select of game mode */}\r\n                <select\r\n                    name=\"mode\"\r\n                    value={mode}\r\n                    onChange={handleChange}\r\n                >\r\n                    <option value=\"0\" hidden disabled selected>Pick game mode</option>\r\n                    { settings.length > 0 && settings.map((mode, i)=>(\r\n                        <option\r\n                            key={i}\r\n                            value={mode[Object.keys(mode)].delay}>\r\n                            {Object.keys(mode)}\r\n                        </option>\r\n                    ))\r\n                    }\r\n\r\n                </select>\r\n\r\n                {/*input of name */}\r\n                <input\r\n                    type=\"text\"\r\n                    placeholder={'your name'}\r\n                    name={'name'}\r\n                    value={name}\r\n                    onChange={handleChange}\r\n                />\r\n\r\n                {/*button for start the game*/}\r\n                <button onClick={newGameFlag ? newGame : blueBg}>\r\n                    {newGameFlag ? 'New game' : 'play'}\r\n                </button>\r\n            </div>\r\n\r\n\r\n            {/*game field*/}\r\n            <div className=\"game\">\r\n                <p>{winner ?`Победил: ${winner}`  : 'Победитель'}</p>\r\n                {dots.map((dots_row,x)=>{\r\n                    return(\r\n                        <div key={x} className={'dots_row'}>\r\n                            {dots_row.map((dot,y)=>(\r\n                                <Dot\r\n                                    dot={dot}\r\n                                    x={x}\r\n                                    y={y}\r\n                                    key={y}\r\n                                    background={dots[x][y]}\r\n                                    userClick = {userClick}\r\n                                />\r\n                            ))}\r\n                        </div>\r\n                    )\r\n                })\r\n                }\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\n\r\n/* board of leaders */\r\nexport const LeaderBoard = ({winnerObj}) => {\r\n    return(\r\n        <div className={'leaderBoard'}>\r\n            <h1>Leader Board</h1>\r\n                {winnerObj.length > 0 && winnerObj.map((winner, i)=>(\r\n                    <div key={i}>\r\n                        <p>\r\n                            {winner.winner}\r\n                        </p>\r\n                        <p>\r\n                            {winner.date}\r\n                        </p>\r\n                    </div>\r\n                ))}\r\n\r\n\r\n        </div>\r\n    )\r\n}","import React from 'react';\nimport './App.css';\nimport {GameBoard} from \"./components/game board/GameBoard\";\nimport {LeaderBoard} from \"./components/board of leaders/LeaderBoard\";\n\nclass App extends React.Component {\n  constructor(props){\n    super(props);\n\n    this.count = 0\n\n    this.state = {\n        indexes: Array.from(Array(5),\n            (_, i) => Array.from(Array(5),\n                (_, k) => [i, k])).flat().sort(this.shuffle),\n\n        dots: Array.from(Array(5), () => Array.from(Array(5), () => null)),\n\n        newGame: false,\n        computer: 0,\n        user: 0,\n        winner: '',\n        mode: '0',\n        name: '',\n        gameSettings: [],\n        dashboardData: []\n    };\n\n\n    this.shuffle = this.shuffle.bind(this)\n    this.blueBg = this.blueBg.bind(this);\n    this.userClick = this.userClick.bind(this);\n    this.newGame = this.newGame.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n\n  shuffle(){\n      return Math.random() - 0.5;\n  }\n\n  /*responsible for init the game*/\n  blueBg(){\n      /* validate before the game */\n      if(this.state.name.length > 0 && this.state.mode != '0') {\n        let dot = this.state.dots.slice();\n\n\n        /* game over */\n        if (this.state.computer >= dot.length**2 / 2 || this.state.user  >= dot.length**2 / 2 ){\n            this.count = 0;\n\n\n            this.setState(state=>({\n                winner: state.computer > state.user ? 'Computer' : state.name,\n                newGame: !state.newGame,\n                dashboardData: [\n                    {\n                        winner: state.computer > state.user ? 'Computer' : state.name,\n                        date: `${new Date().toLocaleTimeString()}; ${new Date().toLocaleDateString()}`\n                    }]\n            }));\n\n\n            /* set the winner to the server */\n            (async()=>{\n                let url = 'https://starnavi-frontend-test-task.herokuapp.com/winners'\n\n\n                let respones = await fetch(url, {\n                    method: 'POST', headers: {\n                        'Content-Type': 'application/json;charset=utf-8'\n                    },\n                    body: JSON.stringify(...this.state.dashboardData)\n                })\n\n                let result = await respones.json();\n                console.log(result.message);\n\n                this.getData()\n            })()\n\n            return\n\n        }\n\n          /*dot get a background*/\n        const [x, y] = this.state.indexes[this.count];\n        dot[x][y] = \"blue\";\n        this.count++;\n\n        this.setState({dots: dot})\n\n        /*dot get a red background*/\n        setTimeout(()=>{\n            if(dot[x][y] === 'blue'){\n                dot[x][y] = 'red'\n                this.setState({\n                    dots: dot,\n                    computer: this.state.computer + 1\n                })\n\n                this.blueBg()\n            }else if(dot[x][y] === 'green'){\n                this.blueBg()\n            }\n        }, this.state.mode)\n    }else{\n        alert('Enter name and pick up game mode')\n    }\n\n  }\n\n  /*responsible for create new game*/\n  newGame(){\n      let dot = this.state.dots.slice();\n\n      /*clear the field*/\n      for(let x = 0; x < dot.length; x++){\n          for(let y = 0; y < dot.length; y++){\n              dot[x][y]= null\n              this.setState({dots: dot})\n          }\n      }\n\n      /*change state for new game*/\n      this.setState(state=>({\n          newGame: !state.newGame,\n          winner: '',\n          mode: '0',\n          name: ''\n      }))\n  }\n\n  /*responsible for user clicks*/\n  userClick(x,y){\n      let dot = this.state.dots.slice();\n\n      /*user click for change the background of dot*/\n      if(dot[x][y]==='blue'){\n          dot[x][y] = 'green'\n          this.setState(state=>({\n              dots: dot,\n              user: state.user + 1\n          }))\n      }\n  }\n\n  /*responsible for changing the number of fields input and select value*/\n  handleChange(e){\n      let target = e.target\n      let name = e.target.name\n\n      /*change the game mode*/\n      if(name === 'mode'){\n\n          for(let i = 0; i<this.state.gameSettings.length; i++){\n\n              let gameSettings = this.state.gameSettings[i][Object.keys(this.state.gameSettings[i])]\n\n              if(target.value == gameSettings.delay){\n                  this.setState({\n                      indexes: Array.from(Array(gameSettings.field),\n                          (_, i) => Array.from(Array(gameSettings.field),\n                              (_, k) => [i, k])).flat().sort(this.shuffle),\n\n                      dots: Array.from(Array(gameSettings.field),\n                          () => Array.from(Array(gameSettings.field), () => null)),\n                  })\n              }\n\n          }\n\n\n          this.setState({\n              [name]: target.value,\n\n          })\n      }else{\n          this.setState({[name]: target.value})\n      }\n\n  }\n\n  /*request to the server*/\n  getData() {\n      (async()=>{\n          let urlMode = 'https://starnavi-frontend-test-task.herokuapp.com/game-settings'\n          /*request for get a data of game settings*/\n          let requestMode = await fetch(urlMode)\n          let settings = await requestMode.json()\n\n          /*request for get a data of leaders*/\n          let urlWinners = 'https://starnavi-frontend-test-task.herokuapp.com/winners'\n          let requestWinner = await fetch(urlWinners)\n          let dashboard = await  requestWinner.json()\n\n          /*save in state property game settings*/\n          let {easyMode, normalMode, hardMode} = settings\n\n          this.setState({gameSettings: [\n                  {easyMode: easyMode},\n                  {normalMode: normalMode},\n                  {hardMode: hardMode},\n              ],\n              dashboardData: [...dashboard]\n          })\n\n      })()\n    }\n\n  componentDidMount() {\n      /*sending request to server*/\n      this.getData()\n  }\n\n\n    render(){\n        return (\n            <div className={'main_wrap'}>\n                <GameBoard\n              winner={this.state.winner}\n              dots={this.state.dots}\n              blueBg={this.blueBg}\n              newGame = {this.newGame}\n              newGameFlag={this.state.newGame}\n              winner = {this.state.winner}\n              userClick = {this.userClick}\n              mode = {this.state.mode}\n              name = {this.state.name}\n              handleChange={this.handleChange}\n              settings = {this.state.gameSettings}\n          />\n                <LeaderBoard winnerObj={this.state.dashboardData}/>\n            </div>\n        )\n    }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}